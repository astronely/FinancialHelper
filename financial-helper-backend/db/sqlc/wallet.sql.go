// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: wallet.sql

package db

import (
	"context"
	"database/sql"
)

const addWalletBalance = `-- name: AddWalletBalance :one
UPDATE wallets
SET balance = ROUND(CAST(balance + $3 AS numeric), 2)
WHERE owner = $1 AND name = $2 RETURNING id, owner, name, balance, currency, created_at
`

type AddWalletBalanceParams struct {
	Owner   int64
	Name    string
	Balance sql.NullFloat64
}

func (q *Queries) AddWalletBalance(ctx context.Context, arg AddWalletBalanceParams) (Wallet, error) {
	row := q.db.QueryRowContext(ctx, addWalletBalance, arg.Owner, arg.Name, arg.Balance)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Name,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const createWallet = `-- name: CreateWallet :one
INSERT INTO wallets (owner,
                     name,
                     balance,
                     currency)
VALUES ($1, $2, $3, $4) RETURNING id, owner, name, balance, currency, created_at
`

type CreateWalletParams struct {
	Owner    int64
	Name     string
	Balance  sql.NullFloat64
	Currency string
}

func (q *Queries) CreateWallet(ctx context.Context, arg CreateWalletParams) (Wallet, error) {
	row := q.db.QueryRowContext(ctx, createWallet,
		arg.Owner,
		arg.Name,
		arg.Balance,
		arg.Currency,
	)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Name,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const decreaseWalletBalance = `-- name: DecreaseWalletBalance :one
UPDATE wallets
set balance = ROUND(CAST(balance - $3 AS numeric), 2)
WHERE owner = $1 AND name = $2 RETURNING id, owner, name, balance, currency, created_at
`

type DecreaseWalletBalanceParams struct {
	Owner   int64
	Name    string
	Balance sql.NullFloat64
}

func (q *Queries) DecreaseWalletBalance(ctx context.Context, arg DecreaseWalletBalanceParams) (Wallet, error) {
	row := q.db.QueryRowContext(ctx, decreaseWalletBalance, arg.Owner, arg.Name, arg.Balance)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Name,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const deleteWallet = `-- name: DeleteWallet :exec
DELETE
FROM wallets
WHERE owner = $1 AND name = $2
`

type DeleteWalletParams struct {
	Owner int64
	Name  string
}

func (q *Queries) DeleteWallet(ctx context.Context, arg DeleteWalletParams) error {
	_, err := q.db.ExecContext(ctx, deleteWallet, arg.Owner, arg.Name)
	return err
}

const getWallet = `-- name: GetWallet :one
SELECT id, owner, name, balance, currency, created_at
FROM wallets
WHERE owner = $1 AND name = $2 LIMIT 1
`

type GetWalletParams struct {
	Owner int64
	Name  string
}

func (q *Queries) GetWallet(ctx context.Context, arg GetWalletParams) (Wallet, error) {
	row := q.db.QueryRowContext(ctx, getWallet, arg.Owner, arg.Name)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Name,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const getWalletsByOwner = `-- name: GetWalletsByOwner :many
SELECT id, owner, name, balance, currency, created_at
FROM wallets
WHERE owner = $1
`

func (q *Queries) GetWalletsByOwner(ctx context.Context, owner int64) ([]Wallet, error) {
	rows, err := q.db.QueryContext(ctx, getWalletsByOwner, owner)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Wallet
	for rows.Next() {
		var i Wallet
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Name,
			&i.Balance,
			&i.Currency,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWallets = `-- name: ListWallets :many
SELECT id, owner, name, balance, currency, created_at
FROM wallets
ORDER BY id LIMIT $1
OFFSET $2
`

type ListWalletsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListWallets(ctx context.Context, arg ListWalletsParams) ([]Wallet, error) {
	rows, err := q.db.QueryContext(ctx, listWallets, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Wallet
	for rows.Next() {
		var i Wallet
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Name,
			&i.Balance,
			&i.Currency,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWallet = `-- name: UpdateWallet :one
UPDATE wallets
SET balance = $3
WHERE owner = $1 AND name = $2 RETURNING id, owner, name, balance, currency, created_at
`

type UpdateWalletParams struct {
	Owner   int64
	Name    string
	Balance sql.NullFloat64
}

func (q *Queries) UpdateWallet(ctx context.Context, arg UpdateWalletParams) (Wallet, error) {
	row := q.db.QueryRowContext(ctx, updateWallet, arg.Owner, arg.Name, arg.Balance)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Name,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}
